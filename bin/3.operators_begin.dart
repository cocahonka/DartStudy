// ignore_for_file: unused_local_variable, dead_code

void main() {
  // Операторы нужны для взаимодействия с переменными
  // Операторы бывают разные: арифметические, сравнения, присваивания и т.д.
  // Все операторы можно разделить на две группы:
  // 1. Операторы, которые возвращают значение
  // 2. Операторы, которые не возвращают значение

  // Операторы, которые возвращают значение
  // Операторы, которые возвращают значение, можно использовать в выражениях
  // Выражения - это часть кода, которая возвращает значение
  // Например, выражение 5 + 5 возвращает значение 10

  // Операторы, которые не возвращают значение это
  // операторы присваивания, инкремента, декремента

  //? Арифметические операторы (возвращают значение типа int или double)
  // + сложение
  // - вычитание
  // * умножение
  // / деление
  // ~/ деление с округлением вниз
  // % остаток от деления

  // Примеры
  int a = 5;
  double b = 2;
  a + b; // 7
  a - b; // 3
  a * b; // 10
  a / b; // 2.5
  a ~/ b; // 2
  a % b; // 1

  //? Операторы сравнения (возвращают значение типа bool)
  // == равно
  // != не равно
  // > больше
  // < меньше
  // >= больше или равно
  // <= меньше или равно

  // Примеры
  a == b; // false
  a != b; // true
  a > b; // true
  a < b; // false
  a >= b; // true
  a <= b; // false

  //? Операторы присваивания (не возвращают значение)
  // = присваивание
  // += присваивание с сложением
  // -= присваивание с вычитанием
  // *= присваивание с умножением
  // /= присваивание с делением
  // ~/= присваивание с делением с округлением вниз
  // %= присваивание с остатком от деления

  //* Важно чтобы возращаемый тип оператора не конфликтовал с типом переменной

  // Примеры
  a = 5; // 5
  a += 2; // 7
  a -= 2; // 5
  a *= 2; // 10
  // a /= 2; //! Ошибка, т.к. a - int, а /= возвращает double
  b /= 2; // 1
  a ~/= 2; // 2
  a %= 2; // 0

  //? Операторы инкремента и декремента (возщащают либо новое значение, либо старое)
  // ++a префиксный инкремент
  // --a префиксный декремент
  // a++ постфиксный инкремент
  // a-- постфиксный декремент

  //* префиксный инкремент/декремент сначала добавляет/отнимает 1, а потом возвращает значение (возвращает новое значение)
  //* постфиксный инкремент/декремент сначала возвращает значение, а потом добавляет/отнимает 1 (возвращает старое значение)

  // Примеры
  ++a; // 1
  --a; // 0
  a++; // 0
  a--; // 1

  //? Побитовые операторы (возвращают значение типа int)
  // & побитовое И
  // | побитовое ИЛИ
  // ^ побитовое исключающее ИЛИ
  // ~ побитовое отрицание
  // << сдвиг влево
  // >> сдвиг вправо
  // >>> сдвиг вправо с заполнением нулями

  // Примеры
  0 & 0; // 0
  0 & 1; // 0
  1 & 0; // 0
  1 & 1; // 1

  0 | 0; // 0
  0 | 1; // 1
  1 | 0; // 1
  1 | 1; // 1

  0 ^ 0; // 0
  0 ^ 1; // 1
  1 ^ 0; // 1
  1 ^ 1; // 0

  ~0; // -1
  ~1; // -2

  1 << 1; // 2 // 1 * 2^1
  1 << 2; // 4 // 1 * 2^2
  1 << 3; // 8 // 1 * 2^3

  8 >> 1; // 4 // 8 / 2^1
  8 >> 2; // 2 // 8 / 2^2
  8 >> 3; // 1 // 8 / 2^3

  8 >>> 1; // 4
  8 >>> 2; // 2
  8 >>> 3; // 1

  //? Операторы присваивания с побитовыми операторами (возвращают значение типа int)
  // &= побитовое И с присваиванием
  // |= побитовое ИЛИ с присваиванием
  // ^= побитовое исключающее ИЛИ с присваиванием
  // <<= сдвиг влево с присваиванием
  // >>= сдвиг вправо с присваиванием
  // >>>= сдвиг вправо с заполнением нулями с присваиванием

  // Примеры
  a = 5; // 5
  a &= 2; // 0
  a |= 2; // 2
  a ^= 2; // 0
  a <<= 2; // 0
  a >>= 2; // 0
  a >>>= 2; // 0

  //? Логические операторы (возвращают значение типа bool)
  // && логическое И
  // || логическое ИЛИ
  // ! логическое отрицание

  // Примеры
  true && true; // true
  true && false; // false
  false && true; // false
  false && false; // false

  true || true; // true
  true || false; // true
  false || true; // true
  false || false; // false

  !true; // false
  !false; // true

  // Примеры логических операторов вместе с операторами сравнения
  1 == 1 && 2 == 2; // true
  1 == 1 && 2 == 3; // false
  1 == 1 || 2 == 3; // true
  1 == 2 || 2 == 3; // false
  !(1 == 2); // true
  !(1 == 1); // false

  //* Как возвести переменную в степень?
  // a^2 = a * a (а во второй степени)
  // a^3 = a * a * a (а в третьей степени)
  // и т.д

  // Пример
  a = 2;
  a * a; // 4
  a * a * a; // 8
}

void homework() {
  const pi = 3.14;

  //* Сами создайте все переменные, которые вам понадобятся для решения задач

  // 1. Высчитать дискриминант квадратного уравнения
  // ax^2 + bx + c = 0
  // D = b^2 - 4ac

  // 2. Высчитать площадь круга
  // S = pi * r^2

  // 3. Высчитать площадь сектора круга
  // S = pi * r^2 * (a / 360)

  // 4. Чему будет равняться переменная prm после выполнения следующего кода?
  int prm = 6;
  prm *= (prm + 2); // Ответ запишите вместо этого комментария (ответ должен быть 48)
  prm ~/= 5; // Ответ запишите вместо этого комментария (ответ должен быть 4)
  prm += (++prm * 7); // Ответ запишите вместо этого комментария (ответ должен быть 48)
  prm %= 13; // Ответ запишите вместо этого комментария (ответ должен быть 12)
  prm &= (prm * prm + 4 * 6 + 1); // Ответ запишите вместо этого комментария (ответ должен быть 8)
}
